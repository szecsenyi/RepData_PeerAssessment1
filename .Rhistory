iris[[Sepal.Length]]
class(iris)
iris[Sepal.Length,1]
iris[1,Sepal.Length]
iris["Sepal.Length",]
iris[,"Sepal.Length"]
tapply(iris(,"Sepal.Length"),"virginica", mean)
tapply(iris[,"Sepal.Length"],"virginica", mean)
tapply(iris[,"Sepal.Length"],iris[,"species"], mean)
tapply(iris[,"Sepal.Length"],iris[,"Species"], mean)
apply(iris[, 1:4], 2, mean)
iris
ls()
set.seed(1)
rpois(5,2)
?rbinom
?rep
rep(0:1, each = 5)
rep(0:1, each = 5)
rep(0:1, each = 5)
rep(0:2, each = 5)
rnorm(10, 0, 20)
e-rnorm(10, 0, 20)
e<-rnorm(10, 0, 20)
e
summary(e)
e<-rnorm(10, 0, 20)
summary(e)
e<-rnorm(10, 0, 20)
summary(e)
e<-rnorm(10, 0, 20)
summary(e)
e<-rnorm(10, 0, 20)
summary(e)
set.seed(10)
x<-rep(0:1,each=5)
e<-rnorm(10, 0, 20)
y<-0.5+2*x+e
plot(x,y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
x1<-1:10
x2<-1:20
fit <- lm(y ~ x1 + x2)
y<1:5
y<-1:5
Rprof(Null)
Rprof(NULL)
Rprof()
fit <- lm(y ~ x1 + x2)
x2<-1:5
x1<-1:5
fit <- lm(y ~ x1 + x2)
summaryRprof()
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
Rprof() fit <- lm(y ~ x1 + x2)
Rprof() {fit <- lm(y ~ x1 + x2)}
exit
install.packages("jsonlite")
library(jsonlite)
install.packages("httr")
myapi <- oath_app("github", "1341b7258e41483c0a4b", secret="a88f7bb3044fd5d95feffe754e0bf1771013d69a")
myapi <- oauth_app("github", "1341b7258e41483c0a4b", secret="a88f7bb3044fd5d95feffe754e0bf1771013d69a")
install.packages("httpuv")
myapi <- oauth_app("github", "1341b7258e41483c0a4b", secret="a88f7bb3044fd5d95feffe754e0bf1771013d69a")
?oauth_app
library(httr)
?oauth_app
myapi <- oauth_app("github", "1341b7258e41483c0a4b", secret="a88f7bb3044fd5d95feffe754e0bf1771013d69a")
myapi
sig <- sign_oauth1.0(myapi)
sig
sig <- sign_oauth1.0(myapi, token="szecsenyi", token_secret="tilburgse")
sig
x <- GET("https://api.github.com/users/jtleek/repos", sig)
x
sig <- sign_oauth1.0(myapi, token="szecsenyi", token_secret="tilburgse1")
x <- GET("https://api.github.com/users/jtleek/repos", sig)
x
sig <- sign_oauth1.0(myapi, token="tibor.szecsenyi@gmail.com", token_secret="tilburgse1")
x <- GET("https://api.github.com/users/jtleek/repos", sig)
x
sig
github_token <- oauth2.0_token(oauth_endpoints("github"), myapi)
gtoken <- config(token = github_token)
?str
x <- GET("https://api.github.com/users/jtleek/repos")
str(x)
y<-fromJSON(x)
y<-fromJSON(toJSON(x))
x
x[1]
x[2]
x[5]
x[4]
x[4]
x[3]
x[5]
x[6]
str(x)
x[9]
x
x[[1]]
x[1]
x[[4]]
x <- GET("https://api.github.com/users/jtleek/repos", gtoken)
myson<-content(x)
myson
ms <- jsonlite::fromJSON(toJSON(myson))
ms
View(ms)
View(ms)
View(ms)
ms[datasharing,]
ms[,"name"=="datasharing"]
ms1<-ms[,"name"=="datasharing"]
ms1
View(ms1)
ms
View(ms)
ms1<-ms[,"name"=="datasharing"]
class(ms1)
ms1[1,]
ms1<-ms[,"name"]=="datasharing"]
ms1<-ms[,"name"]
ms1<-ms[,"name"] == "datasharing"
ms2 <- ms[ms1,]
View(ms2)
ms2[1,"created_at"]
?free
rm(iris)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?xyplot
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(datasets)
data(airquality)
struc(airquality)
struct(airquality)
str(airquality)
View(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
install.packages("proto")
library(proto)
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
set.seed(1234)
?set.seed
?par
par(mar=rep(0.2,4))
rep(0.2,4)
dataMatrix<-matrix(rnorm(400),nrow=40)
View(dataMatrix)
View(dataMatrix)
image(1:10,1:40,t(dataMatrix)[,nrow(dataMatrix):1])
?t
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
4
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
View(dataMatrix)
dataMatrix[1, ] + rep(c(0, 3), each = 5)
dataMatrix[1, ]
?rep
rep(c(0, 3), each = 5)
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
?hclust
?svd
setwd("~/Coursera/Data Science/05 RepData/0PAss1/x")
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
library(reshape)
activity_long<-read.csv("activity.csv")
activity<-cast(activity_long, interval ~ date, value='steps')
```
```{r echo=FALSE}
num2str <- function(x){
s<-paste("000",as.character(x),sep="")
l<-nchar(s)
t<-paste(substr(s,l-3,l-2),":",substr(s,l-1,l),sep="")
t
}
```
## What is mean total number of steps taken per day?
```{r}
totalsteps<-colSums(activity[,2:62])
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
```
Mean of daily total steps (without NAs): `r mean(totalsteps, na.rm=TRUE)`
Median of daily total steps (without NAs): `r median(totalsteps, na.rm=TRUE)`
Mean and median is almost equal.
## What is the average daily activity pattern?
```{r}
ans<-rowMeans(activity[,2:62],na.rm=TRUE)
plot(activity$interval/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
```
Maximum number of steps (average: `r max(ans)`) taken between `r num2str(activity[which.max(ans),1])` and `r num2str(activity[which.max(ans),1]+5)`.
## Imputing missing values
```{r}
library(Hmisc)
activity.i<-cbind(interval=activity$interval,as.data.frame(simplify2array(lapply(x[,2:62],function(t){impute(t,ans)}))))
```
## Are there differences in activity patterns between weekdays and weekends?
activity.i<-cbind(interval=activity$interval,as.data.frame(simplify2array(lapply(activity[,2:62],function(t){impute(t,ans)}))))
View(activity.i)
View(activity)
?is.na
complete.cases(activity)
x<-t(activity)
x<-as.data.framet(activity)
x<-as.data.frame(t(activity))
x<-as.data.table(t(activity))
x<-as.data.frame(t(activity))
activity<-cast(activity_long, date ~ interval, value='steps')
totalsteps<-colSums(activity[2:62,])
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
totalsteps<-colSums(activity[2:62,])
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
totalsteps<-rowSums(activity[2:62,])
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
ans<-rowMeans(activity[2:62,],na.rm=TRUE)
plot(activity$interval/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(activity[interval,]/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(activity['interval',]/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
View(activity)
View(activity)
totalsteps<-rowSums(activity)
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
ans<-rowMeans(activity,na.rm=TRUE)
plot(activity['interval',]/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
totalsteps<-rowSums(activity[2:62,])
totalsteps
totalsteps<-rowSums(activity)
totalsteps
hist(totalsteps)
abline(v=mean(totalsteps, na.rm=TRUE), col="red", lwd=3)
ans<-rowMeans(activity,na.rm=TRUE)
ans
plot(activity['interval',]/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(0:24,ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(1:289, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
str(ans)
plot(1:61, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
ans<-colMeans(activity,na.rm=TRUE)
plot(1:289, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
str(ans)
plot(1:288, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/100, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/20, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/15, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/12, ans, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
x<-activity
library(Hmisc)
impute(x)
impute(x[,2])
x[1,]
impute(x[,2:289])
impute(x[1,2:289])
impute(x[1,2:289],ans)
activity.i<-as.data.frame(simplify2array(lapply(activity[,2:289],function(t){impute(t,ans)})))
impute(x[1,2:289],ans)
lapply(activity[,2:289],function(t){impute(t,ans)})
str(activity[,2:289],function(t))
str(activity[,2:289])
str(ans)
activity.i<-as.data.frame(simplify2array(apply(activity[,2:289],function(t){impute(t,ans)})))
apply(activity[,2:289],function(t){impute(t,ans)})
?apply
apply(activity[,2:289],1,function(t){impute(t,ans)})
activity.i<-as.data.frame(simplify2array(apply(activity[,2:289], 1, function(t){impute(t,ans)})))
View(activity.i)
?simplify2array
?vapply
activity.i<-as.data.frame(simplify2array(apply(activity[,2:289], 1, function(t){impute(t,ans)}),USE.NAMES=TRUE))
View(activity.i)
activity.i<-cbind(date=activity$date,as.data.frame(simplify2array(apply(activity[,2:289], 1, function(t){impute(t,ans)}))))
activity.i<-as.data.frame(simplify2array(apply(activity[,2:289], 1, function(t){impute(t,ans)})))
View(activity.i)
?cast
?cast
?simplify2array
x<-apply(activity[,2:289], 1, function(t){impute(t,ans)})
View(x)
View(x)
x<-apply(activity[,2:289], 2, function(t){impute(t,ans)})
x<-apply(activity[,2:289], 1, function(t){impute(t,ans)})
View(x)
?apply
?colnames
colnames(x)
rownames(x)
t(x)
y<-t(x)
View(y)
?as.int
as.integer
x<-apply(activity[,2:289], 1, function(t){as.integer(impute(t,ans))})
View(x)
y<-t(x)
View(y)
activity.i<-as.data.frame(apply(activity[,2:289], 1, function(t){as.integer(impute(t,ans))}))
activity.i<-as.data.frame(t(apply(activity[,2:289], 1, function(t){as.integer(impute(t,ans))})))
activity.i<-cbind(activity[,1],as.data.frame(t(apply(activity[,2:289], 1, function(t){as.integer(impute(t,ans))}))))
View(activity.i)
colnames(activity)
colnames(activity.i)
x<-cbind(activity[,1],as.data.frame(t(apply(activity[,2:289], 1, function(t){as.integer(impute(t,ans))}))))
colnames(i)<-colnames(activity)
colnames(x)<-colnames(activity)
View(x)
colnames(activity.i)<-colnames(activity)
View(activity.i)
?is.na
complete.cases(activity)
?count
complete.cases(activity)["FALSE"]
complete.cases(activity)[FALSE]
sum(complete.cases(activity))
sum(!complete.cases(activity))
activity[1,which.max(ans)]
which.max(ans)
which.max(ans)
ans[805]
ans[104]
colnames(ans)
str(ans)
names(ans)
names(ans)[which.max(ans)]
?hist
totalsteps.i<-rowSums(activity.i)
totalsteps.i<-rowSums(activity.i[,2:289])
activity[,1]
weekdays(activity[,1])
weekdays(as.date(activity[,1]))
as.data
?as.data
?as.date
weekdays(as.Date(activity[,1]))
?weekdays
weekday(as.Date(activity[,1]))
Sys.setlocale("LC_TIME", "English")
weekday(as.Date(activity[,1]))
weekdays(as.date(activity[,1]))
weekdays(as.Date(activity[,1]))
x.i$isWeekend<-weekdays(as.Date(activity[,1])) %in% c("Saturday","Sunday")
x$isWeekend<-weekdays(as.Date(activity[,1])) %in% c("Saturday","Sunday")
View(x)
View(x)
weekdays(as.Date(activity[,1])) %in% c("Saturday","Sunday")
x[,290]
library(lattice)
activity.i$isWeekend<-weekdays(as.Date(activity[,1])) %in% c("Saturday","Sunday")
library(lattice)
ansWeekend<-colMeans(activity.i[isWeekend,2:289],na.rm=TRUE)
ansWeekend<-colMeans(activity.i['isWeekend',2:289])
ansWeekend<-colMeans(activity.i[activity.i$isWeekend,2:289])
ansWeekday<-colMeans(activity.i[not(activity.i$isWeekend),2:289])
?not
y<-c(TRUE,FALSE,FALSE)
!y
ansWeekday<-colMeans(activity.i[!activity.i$isWeekend,2:289])
ansWeekend<-colMeans(activity.i[activity.i$isWeekend,2:289])
ansWeekday<-colMeans(activity.i[!activity.i$isWeekend,2:289])
par(mfrow=c(2,1))
plot(c(1:288)/12, ansWeekend, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/12, ansWeekday, type="l", xlab="Time (00:00 to 24:00)", ylab="Average number of steps in 5 min")
plot(c(1:288)/12, ansWeekday, type="l")
plot(ansWeekday, type="l")
plot(ansWeekday, type="l")
plot(c(1:288)/12, ansWeekday, type="l")
par(mfrow=c(2,1))
plot(c(1:288)/12, ansWeekday, type="l")
plot(c(1:288)/12, ansWeekend, type="l")
plot(c(1:288)/12, ansWeekday, type="l")
?qplot(mean(),data=activity.i)
```{r fig.height=10}
?plot
?max
xlim=max(ansWeekend,ansWeekday)
ylim=max(ansWeekend,ansWeekday)
par(mfrow=c(2,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mar)
par("mar")
par(mfrow=c(2,1), mar=c(1,1,1,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(2,1,1,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,0,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,2))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,3))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,1))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par("oma")
par(mfrow=c(2,1), mar=c(1,2,1,1), oma=c(0,0,0,2))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,1), oma=c(0,0,2,0))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,1), oma=c(0,2,0,0))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
par(mfrow=c(2,1), mar=c(1,2,1,1), oma=c(2,0,0,0))
plot(c(1:288)/12, ansWeekday, type="l", ylim=c(0,ylim), mar=0)
plot(c(1:288)/12, ansWeekend, type="l", ylim=c(0,ylim), mar=0)
?axis
x<-cbind(ansWeekend,ansWeekday)
View(x)
activity.w<-cbind(ansWeekend,ansWeekday)
?xyplot()
?xyplot(data=activity.w,layout=c(1,2))
xyplot(data=activity.w,layout=c(1,2))
xyplot(ansWeekend,data=activity.w,layout=c(1,2))
names(activity)
activity.w<-cbind(names(activity)[2:289],ansWeekend,ansWeekday)
View(activity.w)
xyplot(V1 ~ ansWeekend,data=activity.w,layout=c(1,2))
xyplot(as.numeric(V1) ~ ansWeekend,data=activity.w,layout=c(1,2))
xyplot(as.Numeric(V1) ~ ansWeekend,data=activity.w,layout=c(1,2))
xyplot(as.Numeric(V1) ~ ansWeekend,data=activity.w)
xyplot(V1 ~ ansWeekend,data=activity.w)
x<-as.data.table(activity.w)
x<-as.data.frame(activity.w)
xyplot(V1 ~ ansWeekend,data=x)
xyplot(ansWeekend,V1,data=x)
xyplot(ansWeekend ~ V1,data=x)
xyplot(ansWeekend,data=x)
View(x)
activity.w<-cbind(as.Numeric(names(activity)[2:289]),ansWeekend,ansWeekday)
activity.w<-cbind(as.numeric(names(activity)[2:289]),ansWeekend,ansWeekday)
x<-as.data.frame(activity.w)
xyplot(ansWeekend ~ V1,data=x)
xyplot(V1,data=x)
xyplot(ansWeekend ~ V1,data=x)
xyplot(ansWeekend ~ V1,data=x)
xyplot(ansWeekend ~ V1,data=x,layout=c(1,2))
xyplot(c(ansWeekend,ansWeekday) ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend,ansWeekday ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend|ansWeekday ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend ~V1 | ansWeekday ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend ~ V1 | ansWeekday ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend | ansWeekday ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend ~ V1,data=x,layout=c(1,2))
xyplot(ansWeekend ~ V1, answeekday ~ V1,data=x,layout=c(1,2))
xyplot(colMeans(),data=activity.i,layout=c(1,2))
?axis
par("xaxp")
par("xaxt")
